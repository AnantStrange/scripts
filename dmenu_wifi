#!/bin/sh

# Function to scan networks and output SSID and Security
scan_networks() {
    printf "rescan\n"
    sudo iwlist wlp3s0 scan | awk -F: '
        /Cell/ { cell = $0 }
        /ESSID/ { ssid = $2 }
        /IE: WPA/ { security = "WPA" }
        /IE: IEEE 802.11i/ { security = "WPA2" }
        /IE: WPA3/ { security = "WPA3" }
        /Encryption key:on/ && !/IE: WPA/ && !/IE: IEEE 802.11i/ { security = "WEP" }
        /Encryption key:off/ { security = "Open" }
        /Quality/ {
            if (ssid && security) {
                gsub(/"/, "", ssid)
                print ssid " Security: " security
                ssid = ""; security = ""
            }
        }
    '
}

# Function to handle SSID selection
select_ssid() {
    while true; do
        choice=$(scan_networks | dmenu -l 10 -p "Select SSID :")

        # Check if user chose to rescan
        if [ "$choice" = "rescan" ]; then
            return 1  # Indicate that rescan is requested
        fi

        # Exit if no SSID selected
        if [ -z "$choice" ]; then
            notify-send "Wi-Fi Connection" "No SSID selected or script exited."
            exit 1
        fi

        # Extract SSID and security type
        ssid=$(echo "$choice" | awk -F " Security: " '{print $1}')
        security=$(echo "$choice" | awk -F " Security: " '{print $2}')
        return 0  # Indicate successful SSID selection
    done
}

# Function to handle password prompt
prompt_password() {
    while true; do
        if [ "$security" != "Open" ]; then
            password=$(printf "rescan\nquit" | dmenu -p "Password for $ssid :")

            if [ "$password" = "quit" ]; then
                echo "Exiting..."
                exit 0
            elif [ "$password" = "rescan" ]; then
                return 1  # Indicate that rescan is requested
            elif [ -n "$password" ]; then
                break  # Exit the password prompt loop with a valid password
            fi
        else
            break  # Exit the password prompt loop if the network is open
        fi
    done
    return 0  # Indicate that password was provided
}

# Function to connect to the network
connect_network() {
    if [ "$security" = "Open" ]; then
        output=$(nmcli device wifi connect "$ssid" 2>&1)
    else
        if [ -z "$password" ]; then
            notify-send "Wi-Fi Connection" "No password provided for $ssid"
            return 1
        fi
        output=$(nmcli device wifi connect "$ssid" password "$password" 2>&1)
    fi

    # Check connection status
    if [ $? -eq 0 ]; then
        notify-send "Wi-Fi Connection" "Successfully connected to $ssid."
        return 0
    else
        notify-send "Wi-Fi Connection" "Failed to connect to $ssid. Output: $output"
        return 1
    fi
}

# Main script execution
notify-send -u normal "Wi-Fi Connection" "Scanning SSID..."
while true; do
    # Select SSID and check if rescan is requested
    if ! select_ssid; then
        continue  # Restart the entire process if rescan is requested
    fi

    while true; do
        # Prompt for password and check if rescan is requested
        if ! prompt_password; then
            break  # Exit the password prompt loop to restart the SSID selection process
        fi

        connect_network
        exit 0
    done
done

